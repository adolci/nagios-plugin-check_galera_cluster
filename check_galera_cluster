#!/bin/bash

################################################
# Title: Check Galera Cluster 
# Description: Local check for check_mk
#                to monitor Galera Cluster.
#                 Fork from https://github.com/fridim/nagios-plugin-check_galera_cluster Version 1.1.4
# Author: Alessandro Dolci <dolci.alessandro94@gmail.com>, Guillaume Cor√© <fridim@onfi.re>, 
#         Ales Nosek <ales.nosek@gmail.com>, Staf Wagemakers <staf@wagemakers.be>
# Creation: 08/08/2018
# Version: 0.1 (08/08/2018) - Creation (adolci)
#
################################################

##### THRESHOLDS #######
# Sets minimum number of nodes in the cluster when WARNING is raised.
warn=2
# Sets minimum number of nodes in the cluster when CRITICAL is raised.
crit=2
# Sets critical value of wsrep_flow_control_paused (default is 0.1).
fcp=0.1
# Rise WARNING if the node is not primary/master (TRUE, FALSE)
primary="TRUE"
########################

ST_OK=0
ST_WR=1
ST_CR=2
ST_UK=3

check_name="check_galera"
check_status=$check_name"_status"
check_node=$check_name"_node"
check_fcp=$check_name"_fcp"
check_primary=$check_name"_primary"

stateFile=$MK_VARDIR/$check_name

param_mysql="--defaults-extra-file=$MK_CONFDIR/mysql.cfg"

check_executable() {
    if [ -z "$1" ]; then
        echo "$ST_UK $check_status UNKNOWN: check_executable: no parameter given!"
        echo "$ST_UK $check_fcp UNKNOWN: check_executable: no parameter given!"
        echo "$ST_UK $check_node UNKNOWN: check_executable: no parameter given!"
        echo "$ST_UK $check_primary UNKNOWN: check_executable: no parameter given!"
        exit $ST_UK
    fi

    if ! command -v "$1" &>/dev/null; then
        echo "$ST_UK $check_status UNKNOWN: Cannot find $1"
        echo "$ST_UK $check_fcp UNKNOWN: Cannot find $1"
        echo "$ST_UK $check_node UNKNOWN: Cannot find $1"
        echo "$ST_UK $check_primary UNKNOWN: Cannot find $1"
        exit $ST_UK
    fi
}

#
# verify check requirments 
#

check_executable mysql
check_executable bc

#
# verify the database connection
#

mysql $param_mysql -B -N  -e '\s;' >/dev/null 2>&1 || {
  echo "$ST_CR $check_status CRITICAL: mysql connection check failed"
  echo "$ST_CR $check_fcp CRITICAL: mysql connection check failed"
  echo "$ST_CR $check_node CRITICAL: mysql connection check failed"
  echo "$ST_CR $check_primary CRITICAL: mysql connection check failed"
  exit $ST_CR
}

#
# verify that the node is part of a cluster
#

rClusterStateUuid=$(mysql $param_mysql -B -N -e "show status like 'wsrep_cluster_state_uuid'; "|cut -f 2)

if [ -z "$rClusterStateUuid" ]; then
  echo "$ST_CR $check_status CRITICAL: node is not part of a cluster"
  echo "$ST_CR $check_fcp CRITICAL: node is not part of a cluster"
  echo "$ST_CR $check_node CRITICAL: node is not part of a cluster"
  echo "$ST_CR $check_primary CRITICAL: node is not part of a cluster"
  exit $ST_CR
fi

rClusterSize=$(mysql $param_mysql -B -N -e "show status like 'wsrep_cluster_size'"|cut -f 2)
rClusterStatus=$(mysql $param_mysql -B -N -e "show status like 'wsrep_cluster_status'"|cut -f 2) # Primary
rFlowControl=$(mysql $param_mysql -B -N -e "show status like 'wsrep_flow_control_paused'"|cut -f 2) # < 0.1
rReady=$(mysql $param_mysql -B -N -e "show status like 'wsrep_ready'"|cut -f 2)  # ON
rConnected=$(mysql $param_mysql -B -N -e "show status like 'wsrep_connected'"|cut -f 2)  # ON
rLocalStateComment=$(mysql $param_mysql -B -N -e "show status like 'wsrep_local_state_comment'"|cut -f 2)  # Synced
rIncommingAddresses=$(mysql $param_mysql -B -N -e "show global status like 'wsrep_incoming_addresses';"|cut -f 2)
  
if [ -z "$rFlowControl" ]; then
  out_fcp=1
  echo "$ST_UK $check_fcp UNKNOWN: wsrep_flow_control_paused is empty"
fi

if [ $(echo "$rFlowControl > $fcp" | bc) = 1 ] && [ -z $out_fcp ]; then
  echo "$ST_CR $check_fcp count=$rFlowControl;$fcp;$fcp;0 CRITICAL: wsrep_flow_control_paused is $rFlowControl (> $fcp)"
else
  echo "$ST_OK $check_fcp count=$rFlowControl;$fcp;$fcp;0 OK: wsrep_flow_control_paused is $rFlowControl (< $fcp)"
fi

if [ "$primary" = 'TRUE' ]; then
  if [ "$rClusterStatus" != 'Primary' ]; then
    echo "$ST_WR $check_primary count=$ST_WR;$ST_WR;$ST_WR;0 WARNING: node is not primary (wsrep_cluster_status)"
  else
    echo "$ST_OK $check_primary count=$ST_OK;$ST_WR;$ST_WR;0 OK: node is primary (wsrep_cluster_status)"
  fi
fi

if [ "$rReady" != 'ON' ]; then
  echo "$ST_CR $check_status count=$ST_CR;$ST_WR;$ST_CR;0 CRITICAL: node is not ready (wsrep_ready)"
  out_status=1
fi

if [ "$rConnected" != 'ON' ] && [ -z $out_status ]; then
  echo "$ST_CR $check_status count=$ST_CR;$ST_WR;$ST_CR;0 CRITICAL: node is not connected (wsrep_connected)"
  out_status=1
fi

if [ "$rLocalStateComment" != 'Synced' ] && [ -z $out_status ]; then
   echo "$ST_CR $check_status count=$ST_CR;$ST_WR;$ST_CR;0 CRITICAL: node is not synced - actual state is: $rLocalStateComment (wsrep_local_state_comment)"
fi

if [ "$rLocalStateComment" == 'Synced' ] && [ -z $out_status ]; then
   echo "$ST_OK $check_status count=$ST_OK;$ST_WR;$ST_CR;0 OK: node is synced - (wsrep_local_state_comment)"
fi

if [ $rClusterSize -gt $warn ]; then
  # only display the ok message if the state check not enabled
  if [ -z "$stateFile" ]; then
    echo "$ST_OK $check_node count=$rClusterSize;$warn;$crit;0 OK: number of NODES = $rClusterSize (wsrep_cluster_size)"
  fi
elif [ $rClusterSize  -le $crit ]; then
    echo "$ST_CR $check_node count=$rClusterSize;$warn;$crit;0 CRITICAL: number of NODES = $rClusterSize (wsrep_cluster_size)"
    exit $ST_CR
elif [ $rClusterSize -le $warn ]; then
    echo "$ST_WR $check_node count=$rClusterSize;$warn;$crit;0 WARNING: number of NODES = $rClusterSize (wsrep_cluster_size)"
    exit $ST_WR
else
    echo "$ST_UK $check_node count=0;$warn;$crit;0 UNKNOWN: number of NODES undefined [$rClusterSize] (wsrep_cluster_size)"
    exit $ST_UK
fi

#
# detect is the connection is lost automatically
#

if [ ! -z "$stateFile" ]; then

  touch $stateFile

  if [ $? != "0" ]; then
    echo "$ST_UK $check_node count=0;$warn;$crit;0 UNKNOWN: stateFile \"$stateFile\" is not writeable)"

  else

    if [ "$rConnected" = "ON" ]; then
      # get the current connected Nodes
      currentNodes=$(echo $rIncommingAddresses | tr "," "\n" | sort -u)
      if [ -f "$stateFile" ]; then
        # get the nodes added to the cluster
        newNodes=$(echo $currentNodes | tr " " "\n" | comm -2 -3 - $stateFile)
        # get the nodes that were removed from the cluster
        missingNodes=$(echo $currentNodes | tr " " "\n" | comm -1 -3 - $stateFile)
        if [ ! -z "$newNodes" ]; then
          # add the new nodes to the cluster to the state file
          echo $newNodes | tr " " "\n" >> $stateFile
        fi
      else
        # there is no state file yet, creating new one.
        echo $currentNodes | tr " " "\n" > $stateFile
      fi # -f stateFile
      # get the numeber of nodes that were part of the cluster before
      maxClusterSize=$(cat $stateFile | wc -l)

      if [ $maxClusterSize -eq  $rClusterSize ]; then
        if [ $maxClusterSize -eq 1 ]; then
            if [ $crit -eq 0 -a  $warn -eq 0 ]; then
              echo "$ST_OK $check_node count=$rClusterSize;$warn;$crit;0 OK: running single-node database cluster"
            fi
        else
          echo "$ST_OK $check_node count=$rClusterSize;$warn;$crit;0 OK: running redundant $rClusterSize online / $maxClusterSize total"
        fi
      else
        echo "$ST_WR $check_node count=$rClusterSize;$warn;$crit;0 WARNING: redundant  $rClusterSize online / $maxClusterSize  total, missing peers: $missingNodes"
      fi
  
    fi # rConnected

  fi # -w stateFile

fi # -z stateFile
